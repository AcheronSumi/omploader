#!/bin/env ruby
#
# Copyright 2007-2009 David Shakaryan <omp@gentoo.org>
# Copyright 2007-2009 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'pathname'

path = Pathname.new(__FILE__).dirname

$LOAD_PATH << path

require 'omploader'

help = false
complete = false
delete = false

argv = Array.new

ARGV.each do |arg|
	if arg =~ /-h|--help/
		help = true
	elsif arg =~ /-c|--complete/
		if delete
			help = true
			break
		end
		complete = true
	elsif arg =~ /-d|--delete/
		if complete
			help = true
			break
		end
		delete = true
	else
		argv << arg
	end
end

if complete and argv.size != 2
	help = true
end

if help or (argv.empty?)
	$stderr.puts 'Usage:  videors [-h|--help] [options] ID'
	$stderr.puts '  -c, --complete  mark video as complete (this'
	$stderr.puts '                  requires a size argument)'
	$stderr.puts '  -d, --delete    delete video'
	exit 1
end

Db = db_connect

def complete(arg, size)
	begin
		id = arg.to_id
		# Verify that id is strictly numeric.
		if id !~ /[A-Za-z0-9+\/]+/
			'Invalid ID "' + arg + '"'
			return
		end
		query = Db.prepare('update metadata set metadata.displayed_size = ?, metadata.valid = ? where metadata.id = ?')
		query.execute(size, 1, id).close
		Db.commit
		puts "Successfully completed #{id.to_b64}"
	rescue Mysql::Error => err
		Db.rollback unless Db.nil?
		$stderr.puts 'Error in videor script'
		$stderr.puts err
	rescue RuntimeError => err
		Db.rollback unless Db.nil?
		$stderr.puts err
	end
end

def delete(arg)
	begin
		id = arg.to_id
		# Verify that id is strictly numeric.
		if id !~ /[A-Za-z0-9+\/]+/
			'Invalid ID "' + arg + '"'
			return
		end
		query = Db.prepare('delete from comments, comments_body using comments inner join comments_body on comments_body.id = comments.comment_id where comments.metadata_id = ?')
		stmt = query.execute(id)
		query = Db.prepare('delete from thumbnails, votes, metadata using metadata left join thumbnails on thumbnails.id = metadata.thumbnail_id left join votes on votes.metadata_id = metadata.id where metadata.id = ?')
		stmt = query.execute(id)
		begin
			File.unlink(path + Paths['data'] + '/' + id.to_b64)
		rescue Errno::ENOENT
		end
		# shouldn't be any thumbs, but it can't hurt to try
		begin
			File.unlink(path + Paths['thumbnails'] + '/' + id.to_b64)
		rescue Errno::ENOENT
		end
		Db.commit
		stmt.close
		puts "Successfully removed #{id.to_b64}"
	rescue Mysql::Error => err
		Db.rollback unless Db.nil?
		$stderr.puts 'Error in videor script'
		$stderr.puts err
	rescue RuntimeError => err
		Db.rollback unless Db.nil?
		$stderr.puts err
	end
end


if delete
	delete(argv[0])
elsif complete
	size = argv[0].to_i
	id = argv[1].to_s
	complete(id, size)
end

