#!/bin/env ruby
#
# $Id$
#
# Copyright 2007 David Shakaryan <omp@gentoo.org>
# Copyright 2007 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'RMagick'
include Magick

db = db_connect

FCGI.each_cgi {|cgi|
	begin
		db_check(db)
		register_visit(cgi, db)

		id = cgi.params['id'].to_s.to_id

		# Verify that id is strictly numeric.
		if id !~ /\A\d+\z/
			raise 'You are a trad.'
		end
		query = db.prepare('select metadata.content_type_id, metadata.thumbnail_id, names.name from metadata inner join names on names.id = metadata.name_id where metadata.id = ?')
		stmt = query.execute(id)
		num_rows = stmt.num_rows
		info = stmt.fetch
		stmt.close

		# Verify that id exists in database.
		if num_rows < 1
			raise 'Nothing to pee here.'
		end
		content_type_id = info[0].to_s
		thumbnail_id = info[1].to_s
		name = info[2].to_s

		if !content_type_id.empty?
			name = name.insert(name.rindex('.'), '-thumb') if !name.empty? and name =~ /\./

			query = db.prepare('select content_types_main.type, content_types_sub.type from content_types inner join content_types_main on content_types_main.id = content_types.content_type_main_id inner join content_types_sub on content_types_sub.id = content_types.content_type_sub_id where content_types.id = ?')
			stmt = query.execute(content_type_id)
			result = stmt.fetch
			stmt.close

			content_type = result[0]+ '/' + result[1]

			if result[0] == 'image' and thumbnail_id.empty?
				datum = Mmap.new(Paths['data'] + '/' + id.to_b64, 'r')
				imlist = Magick::ImageList.new
				imlist.from_blob(datum.to_str)
				imlist = imlist.coalesce
				thumb = imlist.flatten_images

				# Determine best thumbnail size.
				if (thumb.columns.to_f / thumb.rows.to_f) == (4/3.0)
					thumb = thumb.thumbnail(100, 75)
				elsif (thumb.columns.to_f / thumb.rows.to_f) > (4/3.0)
					if (((4.0/3) / (thumb.columns.to_f / thumb.rows.to_f))*75).to_i == 0
						thumb = thumb.thumbnail(100, 1)
					else
						thumb = thumb.thumbnail(100, 75 * ((4.0/3) / (thumb.columns.to_f / thumb.rows.to_f)))
					end
				else
					if (((thumb.columns.to_f / thumb.rows.to_f) / (4/3.0))*100).to_i == 0
						thumb = thumb.thumbnail(1, 75)
					else
						thumb = thumb.thumbnail(100 * ((thumb.columns.to_f / thumb.rows.to_f) / (4/3.0)), 75)
					end
				end
				datum.munmap

				query = db.prepare('insert into thumbnails (image) values (?)')
				stmt = query.execute(thumb.to_blob.to_s)
				insert_id = stmt.insert_id
				stmt.close

				query = db.prepare('update metadata set thumbnail_id = ? where id = ?')
				query.execute(insert_id, id).close

				db.commit
				cgi.out('type' => content_type, 'Content-Disposition' => 'inline; filename="' + name + '"', 'Cache-Control' => 'min-fresh=604800', 'expires' => Time.now + 604800) { thumb.to_blob.to_s }
				GC.start
			elsif result[0] == 'image'
				query = db.prepare('select image from thumbnails where id = ?')
				stmt = query.execute(thumbnail_id)
				output = stmt.fetch.to_s
				stmt.close
				query = db.prepare('update thumbnails set last_accessed = current_timestamp where id = ?')
				query.execute(thumbnail_id).close
				db.commit
				cgi.out('type' => content_type, 'Content-Disposition' => 'inline; filename="' + name + '"', 'Cache-Control' => 'min-fresh=604800', 'expires' => Time.now + 604800) { output }
			else
				db.commit
				cgi.out('type' => 'image/png', 'Content-Disposition' => 'inline; filename="omploader-thumb.png' + '"', 'Cache-Control' => 'min-fresh=604800', 'expires' => Time.now + 604800) { File.read('../omploader_thumb.png') }
			end
		end
	rescue Magick::ImageMagickError => err
		# just ignore these for the most part
		db.rollback unless db.nil?
		cgi.out('text/plain') { 'This thumbnail is fucked, sorry.' }
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.to_s
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Ouch, db error: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">' + err + '</div>' + xhtml_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.to_s
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue StandardError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.to_s
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.to_s
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled: ' + err + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	end
}
