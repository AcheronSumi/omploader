#!/bin/env ruby
#
# $Id$
#
# Copyright 2007-2008 David Shakaryan <omp@gentoo.org>
# Copyright 2007-2008 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'RMagick'
include Magick

db = db_connect

FCGI.each_cgi {|cgi|
	begin
		id = cgi.params['id'].to_s.to_id

		# Verify that id is strictly numeric.
		if id !~ /\A\d+\z/
			raise 'You are a trad.'
		end
		Cache.delete($0 + id + 'name')
		thumb_name = Cache.get($0 + id + 'name')
		thumb_type = Cache.get($0 + id + 'type')
		if thumb_name.nil? or thumb_type.nil?
			visitor_id = Cache.get('visitor_id' + cgi.remote_addr.to_s)
			if visitor_id.nil?
				db_check(db)
				visitor_id = register_visit(cgi, db)
				Cache.set('visitor_id' + cgi.remote_addr.to_s, visitor_id, Default_cache_expiry_long)
			else
				db_check(db)
			end

			query = db.prepare('select metadata.content_type_id, metadata.thumbnail_id, names.name from metadata inner join names on names.id = metadata.name_id where metadata.id = ?')
			stmt = query.execute(id)
			num_rows = stmt.num_rows
			info = stmt.fetch
			stmt.close

			# Verify that id exists in database.
			if num_rows < 1
				raise 'Nothing to pee here.'
			end
			content_type_id = info[0].to_s
			thumbnail_id = info[1].to_s
			name = info[2].to_s

			if !content_type_id.empty?
				name = name.insert(name.rindex('.'), '-thumb') if !name.empty? and name =~ /\./

					query = db.prepare('select content_types_main.type, content_types_sub.type from content_types inner join content_types_main on content_types_main.id = content_types.content_type_main_id inner join content_types_sub on content_types_sub.id = content_types.content_type_sub_id where content_types.id = ?')
				stmt = query.execute(content_type_id)
				result = stmt.fetch
				stmt.close

				content_type = result[0]+ '/' + result[1]

				if result[0] == 'image' and thumbnail_id.empty?
					datum = Mmap.new(Paths['data'] + '/' + id.to_b64, 'r')
					imlist = Magick::ImageList.new
					imlist.from_blob(datum.to_str)
					imlist = imlist.coalesce
					thumb = imlist.flatten_images

					# Determine best thumbnail size.
					if (thumb.columns.to_f / thumb.rows.to_f) == (4/3.0)
						thumb = thumb.thumbnail(120, 90)
					elsif (thumb.columns.to_f / thumb.rows.to_f) > (4/3.0)
						if (((4.0/3) / (thumb.columns.to_f / thumb.rows.to_f))*90).to_i == 0
							thumb = thumb.thumbnail(120, 1)
						else
							thumb = thumb.thumbnail(120, 90 * ((4.0/3) / (thumb.columns.to_f / thumb.rows.to_f)))
						end
					else
						if (((thumb.columns.to_f / thumb.rows.to_f) / (4/3.0))*120).to_i == 0
							thumb = thumb.thumbnail(1, 90)
						else
							thumb = thumb.thumbnail(120 * ((thumb.columns.to_f / thumb.rows.to_f) / (4/3.0)), 90)
						end
					end
					datum.munmap

					file = File.new(Paths['thumbnails'] + '/' + id.to_b64, File::CREAT|File::TRUNC|File::RDWR, 0664)
					file.close
					datum = Mmap.new(file.path, 'rw')
					datum.insert(0, thumb.to_blob.to_s)
					datum.unmap

					query = db.prepare('insert into thumbnails (last_accessed) values (current_timestamp)')
					stmt = query.execute
					insert_id = stmt.insert_id
					stmt.close

					query = db.prepare('update metadata set thumbnail_id = ? where id = ?')
					query.execute(insert_id, id).close

					cgi.out('type' => content_type, 'Content-Disposition' => 'inline; filename="' + name + '"', 'Cache-Control' => 'min-fresh=31536000', 'expires' => Time.now + 31536000, 'X-Sendfile' => Dir.pwd + '/' + Paths['thumbnails'] + '/' + id.to_b64) {''}
					db.commit
					Cache.set($0 + id + 'name', name, Default_cache_expiry_long)
					Cache.set($0 + id + 'type', content_type, Default_cache_expiry_long)
					GC.start
				elsif result[0] == 'image'
					query = db.prepare('update thumbnails set last_accessed = current_timestamp where id = ?')
					query.execute(thumbnail_id).close
					cgi.out('type' => content_type, 'Content-Disposition' => 'inline; filename="' + name + '"', 'Cache-Control' => 'min-fresh=31536000', 'expires' => Time.now + 31536000, 'X-Sendfile' => Dir.pwd + '/' + Paths['thumbnails'] + '/' + id.to_b64) {''}
					db.commit
					Cache.set($0 + id + 'name', name, Default_cache_expiry_long)
					Cache.set($0 + id + 'type', content_type, Default_cache_expiry_long)
				else
					cgi.out('type' => 'image/png', 'Content-Disposition' => 'inline; filename="omploader-thumb.png"', 'Cache-Control' => 'min-fresh=31536000', 'expires' => Time.now + 31536000, 'X-Sendfile' => Dir.pwd + '/../omploader_thumb.png') {''}
					db.commit
					Cache.set($0 + id + 'name', 'omploader-thumb.png', Default_cache_expiry_long)
					Cache.set($0 + id + 'type', 'image/png', Default_cache_expiry_long)
				end
			end
		else
			cgi.out('type' => thumb_type, 'Content-Disposition' => 'inline; filename="' + thumb_name + '"', 'Cache-Control' => 'min-fresh=31536000', 'expires' => Time.now + 31536000, 'X-Sendfile' => Dir.pwd + '/' + Paths['thumbnails'] + '/' + id.to_b64) {''}
			visitor_id = Cache.get('visitor_id' + cgi.remote_addr.to_s)
			if visitor_id.nil?
				db_check(db)
				visitor_id = register_visit(cgi, db)
				Cache.set('visitor_id' + cgi.remote_addr.to_s, visitor_id, Default_cache_expiry_long)
			end
			db.commit
		end
	rescue Magick::ImageMagickError => err
		# just ignore these for the most part
		db.rollback unless db.nil?
		cgi.out('text/plain') { 'This thumbnail is fucked, sorry.' }
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Ouch, db error: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">' + err + '</div>' + xhtml_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue StandardError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue MemCache::MemCacheError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled: ' + err + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	end
}
