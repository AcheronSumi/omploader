#!/bin/env ruby
#
# $Id$
#
# Copyright 2007 David Shakaryan <omp@gentoo.org>
# Copyright 2007 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'find'

comments = false
cleanup = false
help = false

argv = Array.new

ARGV.each do |arg|
	if arg =~ /-h|--help/
		help = true
	elsif arg =~ /-c|--comments/
		comments = true
	elsif arg =~ /-C|--cleanup/
		cleanup = true
	else
		argv << arg
	end
end

if help or (argv.empty? and !cleanup)
	$stderr.puts 'Usage:  delete [-h|--help] [options] ID [ID ID ID ...]'
	$stderr.puts '  -c, --comments  take arguments as comment IDs'
	$stderr.puts '  -C, --cleanup   cleanup other elements, such as the names and'
	$stderr.puts '                  content_types tables to make sure there is no extra cruft'
	$stderr.puts
	$stderr.puts '  You can supply as many id\'s as arguments as you want.'
	$stderr.puts '  Use this script only when necessary, as it can put a'
	$stderr.puts '  significant load on the database.'
end

db = db_connect

if !comments
	argv.each do |arg|
		begin
			id = arg.to_id
			# Verify that id is strictly numeric.
			if id !~ /[A-Za-z0-9+\/]+/
				raise 'Ignoring argument "' + arg + '"'
				next
			end
			query = db.prepare('delete from comments, comments_body using comments inner join comments_body on comments_body.id = comments.comment_id where comments.metadata_id = ?')
			stmt = query.execute(id)
			query = db.prepare('delete from thumbnails, votes, metadata using metadata left join thumbnails on thumbnails.id = metadata.thumbnail_id left join votes on votes.metadata_id = metadata.id where metadata.id = ?')
			stmt = query.execute(id)
			File.unlink(Paths['data'] + '/' + id.to_b64)
			db.commit
			stmt.close
			puts "Successfully removed #{id.to_b64}"
		rescue Mysql::Error => err
			db.rollback unless db.nil?
			$stderr.puts 'Error in delete script'
			$stderr.puts err
		rescue RuntimeError => err
			db.rollback unless db.nil?
			$stderr.puts err
		end
	end
end
	
if comments
	argv.each do |arg|
		begin
			id = arg.to_i
			if id < 1
				raise 'Ignoring argument "' + arg + '"'
			end
			query = db.prepare('update metadata inner join comments on comments.metadata_id = metadata.id set metadata.comment_count = metadata.comment_count - 1 where comments.id = ?')
			query.execute(id).close
			query = db.prepare('delete	from comments, comments_body using comments inner join comments_body on comments_body.id = comments.comment_id	where	comments.id = ?')
			query.execute(id).close
			db.commit
		rescue Mysql::Error => err
			db.rollback unless db.nil?
			$stderr.puts 'Error in delete script'
			$stderr.puts err
		rescue RuntimeError => err
			db.rollback unless db.nil?
			$stderr.puts err
		end
	end
end

if cleanup
	begin
		query = db.prepare('delete from content_types using content_types left join metadata on metadata.content_type_id = content_types.id where metadata.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in content_types"
		end
		query = db.prepare('delete	from content_types_main using content_types_main left join content_types on content_types.content_type_main_id = content_types_main.id where content_types.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in content_types_main"
		end
		query = db.prepare('delete from content_types_sub using content_types_sub left join content_types on content_types.content_type_sub_id = content_types_sub.id where content_types.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in content_types_sub"
		end
		query = db.prepare('delete from thumbnails using thumbnails left join metadata on metadata.thumbnail_id = thumbnails.id where metadata.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in thumbnails"
		end
		query = db.prepare('delete from comments_body using comments_body left join comments on comments.comment_id = comments_body.id left join metadata on metadata.id = comments.metadata_id where metadata.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in comments_body"
		end
		query = db.prepare('delete from comments using comments left join metadata on metadata.id = comments.metadata_id where metadata.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in comments"
		end
		query = db.prepare('delete from names using names left join metadata as m1 on m1.name_id = names.id left join metadata as m2 on m2.artist_id = names.id left join metadata as m3 on m3.title_id = names.id left join metadata as m4 on m4.album_id = names.id left join metadata as m5 on m5.year_id = names.id left join owners on owners.name_id = names.id where m1.id is null and m2.id is null and m3.id is null and m4.id is null and m5.id is null and owners.id is null')
		stmt = query.execute
		count = db.affected_rows
		stmt.close
		if count > 0
			puts "Found #{count} lonely rows in names"
		end
		db.commit
		Find.find(Paths['data']) do |path|
			next if path == Paths['data']
			base = File.basename(path)
			if base.to_id == 0 or base != base.to_id.to_b64
				# junk
				print "Trying to remove '#{path}'..."
				File.unlink(path)
				puts 'done.'
			else
				query = db.prepare('select id from metadata where id = ?')
				stmt = query.execute(base.to_id)
				if stmt.num_rows < 1
					# junk
					print "Trying to remove '#{path}'..."
					File.unlink(path)
					puts 'done.'
				end
				stmt.close
			end
		end
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		$stderr.puts 'Error in delete script'
		$stderr.puts err
		log = Logger.new(Paths['log'])
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		$stderr.puts err
		log = Logger.new(Paths['log'])
		log.error(err)
	end
end

