#!/bin/env ruby
#
# Copyright 2007-2009 David Shakaryan <omp@gentoo.org>
# Copyright 2007-2009 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'uri'

def get_video_body(id, name, orig_name)
	turls = "#{Down_bucket_url}#{id}/#{name}-still.gif"
	turl = "#{Down_bucket_url}#{id}/#{name}.gif"
	vurl = "#{Down_bucket_url}#{id}/#{name}.ogg"
	html = <<-EOF;
		<div class="content">
			<video id="the_video" src="#{vurl}" controls="true">
				<h2>Can't see anything?  You probably need a browser that can playback Ogg media using &lt;video&gt; and &lt;audio&gt;. Try <a href="http://www.mozilla.com/en-US/firefox/all-beta.html">Firefox 3.5 beta</a>, <a href="http://labs.opera.com/news/2008/07/18/">Opera experimental builds</a> or <a href="http://www.apple.com/safari/">Safari</a> with <a href="http://xiph.org/quicktime/">XiphQT</a>.</h2>
				<img src="#{turls}" id="thumb_1" onmouseover="document.getElementById('thumb_1').src='#{turl}'" onmouseout="document.getElementById('thumb_1').src='#{turls}'" />
			</video>
			<div id="vidinfos"><a href="#{vurl}?torrent">Download</a> <span class="separator">&#x2503;</span> <a id="infolink" href="">+ Show Info</a></div>
			<div id="info_area"></div>
			<script type="text/javascript" src="/jvid.js"></script>
		</div>
EOF
	return html_pre(' â€“ ' + orig_name, '', false, true) + html + html_post(true)
end

FCGI.each_cgi {|cgi|
	begin
		db = db_connect

		id = cgi.params['id'].to_s.to_id

		# Verify that id is strictly numeric.
		if id !~ /\A\d+\z/
			raise 'You are a trad.'
		end

		info = Cache.get($0 + 'vinfo' + id)
		is_video = valid = 0
		if info.nil?
			db_check(db)
			query = db.prepare('select names.name, content_types_main.type, content_types_sub.type, metadata.valid, metadata.is_video from metadata inner join names on names.id = metadata.name_id inner join content_types on content_types.id = metadata.content_type_id inner join content_types_main on content_types_main.id = content_types.content_type_main_id inner join content_types_sub on content_types_sub.id = content_types.content_type_sub_id where metadata.id = ?')
			stmt = query.execute(id)

			# Verify that id exists in database.
			if stmt.num_rows < 1
				stmt.close
				raise 'Nothing to pee here.'
			end
			info = stmt.fetch
			stmt.close
			valid = info[3].to_i
			is_video = info[4].to_i
			if is_video > 0 and valid < 1
				Cache.set($0 + 'vinfo' + id, Base64.encode64(Marshal.dump(info)), Default_cache_expiry_short)
			else
				Cache.set($0 + 'vinfo' + id, Base64.encode64(Marshal.dump(info)), Default_cache_expiry_long)
			end
		else
			info = Marshal.load(Base64.decode64(info))
			valid = info[3].to_i
			is_video = info[4].to_i
		end
		name = info[0].to_s
		content_type = info[1]+ '/' + info[2]
		if valid < 1
			if is_video > 0
				raise 'Sorry, we\'re still working on it.  Go grab some lunch or something.'
			else
				raise 'Nothing to pee here.'
			end
		end

		cgi_head = {'type' => content_type,
					'Content-Disposition' => 'inline; filename="' + name + '"',
					'Cache-Control' => 'min-fresh=31536000',
					'expires' => Time.now + 31536000 }
		if is_video > 0
			html = Cache.get($0 + 'v' + id)
			if !html.nil?
				html = Marshal.load(Base64.decode64(html))
			else
				html = get_video_body(id.to_b64, name.chomp('.html').video_sanitise, name.chomp('.html'))
				Cache.set($0 + 'v' + id, Base64.encode64(Marshal.dump(html)), Default_cache_expiry_long * 10)
			end
			cgi.out(cgi_head) { html }
		else
			if Xsendfile
				cgi_head['X-Sendfile'] = Dir.pwd + '/' + Paths['data'] + '/' + id.to_b64
				cgi.out(cgi_head) {''}
			else
				file = File.new(Dir.pwd + '/' + Paths['data'] + '/' + id.to_b64, mode='r')
				cgi.out(cgi_head) {file.read}
				file.close
			end
		end

		visitor_id = get_cached_visitor_id(cgi, db)

		# Increment vote number if this is first view from visitor.
		query = db.prepare('select id from votes where visitor_id = ? and metadata_id = ?')
		stmt = query.execute(visitor_id, id)
		rows = stmt.num_rows
		stmt.close
		if rows == 0
			query = db.prepare('update metadata set hits = hits + 1 where id = ?')
			query.execute(id).close
			if visitor_id.to_i:
				begin
					query = db.prepare('insert into votes (visitor_id, metadata_id) values (?,?)')
					query.execute(visitor_id, id)
				rescue Mysql::Error => err
					# ignore
				ensure
					query.close
				end
			end
			referrer = cgi.referer.to_s
			referrer = URI.extract(referrer).first
			if referrer and !referrer.empty?
				split = URI.split(referrer)
				host = split[2]
				if host != cgi.host
					query = db.prepare('insert into referrers (address) values (?) on duplicate key update id = last_insert_id(id)')
					stmt = query.execute(referrer)
					referrer_id = stmt.insert_id.to_s
					stmt.close
					query = db.prepare('insert into referrals (referrer_id, metadata_id) values (?,?) on duplicate key update count = count + 1')
					query.execute(referrer_id, id).close
				end
			end
		end

		db.commit
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Ouch, db error: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			html_pre + '        <div class="content large">' + err + '</div>' + html_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue StandardError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue MemCache::MemCacheError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled: ' + err + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	ensure
		db.close if db
	end
}
