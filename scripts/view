#!/bin/env ruby
#
# $Id$
#
# Copyright 2007 David Shakaryan <omp@gentoo.org>
# Copyright 2007 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'uri'

db = db_connect

FCGI.each_cgi {|cgi|
	begin
		db_check(db)
		visitor_id = register_visit(cgi, db)

		id = cgi.params['id'].to_s.to_id

		# Verify that id is strictly numeric.
		if id !~ /\A\d+\z/
			raise 'You are a trad.'
		end
		query = db.prepare('select names.name, content_types_main.type, content_types_sub.type	from metadata inner join names on names.id = metadata.name_id inner join content_types on content_types.id = metadata.content_type_id inner join content_types_main on content_types_main.id = content_types.content_type_main_id inner join content_types_sub on content_types_sub.id = content_types.content_type_sub_id where metadata.id = ?')
		stmt = query.execute(id)

		# Verify that id exists in database.
		if stmt.num_rows < 1
			stmt.close
			raise 'Nothing to pee here.'
		end
		info = stmt.fetch
		stmt.close
		name = info[0].to_s
		content_type = info[1]+ '/' + info[2]

		# Increment vote number if this is first view from visitor.
		query = db.prepare('select id from votes where visitor_id = ? and metadata_id = ?')
		res = query.execute(visitor_id, id)
		rows = res.num_rows
		res.close
		if rows == 0
			query = db.prepare('update metadata set hits = hits + 1 where id = ?')
			query.execute(id).close
			query = db.prepare('insert into votes (visitor_id, metadata_id) values (?,?)')
			query.execute(visitor_id, id).close
			referrer = cgi.referer.to_s
			referrer = URI.extract(referrer).first
			if referrer and !referrer.empty?
				split = URI.split(referrer)
				host = split[2]
				if host != cgi.host
					query = db.prepare('select id from referrers where address = ?')
					query.execute(referrer).close
					if query.num_rows < 1
						query = db.prepare('insert into referrers (address) values (?)')
						query.execute(referrer).close
						referrer_id = query.insert_id.to_s
					else
						referrer_id = query.fetch.to_s
					end
					query = db.prepare('insert into referrals (referrer_id, metadata_id) values (?,?) on duplicate key update count = count + 1')
					query.execute(referrer_id, id).close
				end
			end
		end

		db.commit

		datum = Mmap.new(Paths['data'] + '/' + id.to_b64, 'r')

		cgi.out('type' => content_type, 'Content-Disposition' => 'inline; filename="' + name + '"', 'Cache-Control' => 'min-fresh=604800', 'expires' => Time.now + 604800) { datum.to_str }
		datum.munmap
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Ouch, db error: ' + err + '</div>' + xhtml_post
		}
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">' + err + '</div>' + xhtml_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + err + ' [ ' + err.backtrace.to_s + ' ]</div>' + xhtml_post
		}
	rescue StandardError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + err + ' [ ' + err.backtrace.to_s + ' ]</div>' + xhtml_post
		}
	rescue
		db.rollback unless db.nil?
		cgi.out('text/html') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled.</div>' + xhtml_post
		}
	end
}
