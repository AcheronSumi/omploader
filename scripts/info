#!/bin/env ruby
#
# Copyright 2007-2009 David Shakaryan <omp@gentoo.org>
# Copyright 2007-2009 Brenden Matthews <brenden@rty.ca>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'tempfile'
require 'rubygems'
require 'recaptcha'


Captcha = ReCaptcha::Client.new(Pub_key, Priv_key)

FCGI.each_cgi {|cgi|
	begin
		db = db_connect
		visitor_id = get_cached_visitor_id(cgi, db)

		throttle = Cache.get('throttle' + visitor_id)
		if throttle.nil?
			thottle = 0
		end

		owner_id = get_cached_owner_id(cgi, db)

		hide_comments = Cache.get($0 + 'hide_comments ' + owner_id.to_s)
		if !owner_id.nil? and hide_comments.nil?
			query = db.prepare('select hide_comments from owners where id = ?')
			query.execute(owner_id)
			hide_comments = query.fetch.to_s.to_i
			query.close
		elsif !hide_comments.nil?
			hide_comments = hide_comments.to_i
		else
			hide_comments = 0
		end

		if cgi.has_key?('hide_comments') and hide_comments != cgi.params['hide_comments'].to_s.to_i
			hide_comments = cgi.params['hide_comments'].to_s.to_i
			update_prefs = true
		else
			update_prefs = false
		end
		comment_name = ''
		comment_body = ''

		if !owner_id.nil? and cgi.has_key?('loldongs' + owner_id) and throttle.to_i < Max_upload_count
			lolres = Captcha.validate(cgi.remote_addr, cgi['recaptcha_challenge_field'].read.to_s, cgi['recaptcha_response_field'].read.to_s)
			if !lolres
				cgi.out('application/xhtml+xml') {
					xhtml_pre + '        <div class="content large">Captcha failure :(</div>' + xhtml_post
				}
				db.commit
				next
			end
			comment_body = cgi['loldongs' + owner_id].read.to_s.sanitise
			comment_name = cgi['peewang' + owner_id].read.to_s.sanitise
			id = cgi['cocks' + owner_id].read.to_id
			if !comment_body.empty?
				# Insert our new comment into db
				query = db.prepare('insert into comments_body (body) values (?)')
				comment_id = query.execute(comment_body).insert_id
				query.close
				query = db.prepare('insert into comments (comment_id, metadata_id, owner_id) values (?,?,?)')
				comment_id = query.execute(comment_id, id, owner_id).insert_id
				query.close
				query = db.prepare('update metadata set comment_count = comment_count + 1 where id = ?')
				query.execute(id)
				query.close
				if !owner_id.nil?
					query = db.prepare('insert into names (name) values (?) on duplicate key update id = last_insert_id(id)')
					name_id = query.execute(comment_name).insert_id
					query.close
					query = db.prepare('update owners set name_id = ? where id = ?')
					query.execute(name_id, owner_id)
					query.close
				end
				redirect = 'i' + id.to_b64 + '#comment_' + comment_id.to_s
				print cgi.header({'Status' => '302 Moved', 'location' => redirect})
				db.commit
				Cache.set('throttle' + visitor_id, thottle.to_i + 1, Max_upload_period)
				Cache.delete($0 + id)
				Cache.delete($0 + 'comments' + id)
				last_comment_time = Cache.get('lastcomment')
				if last_comment_time.nil? or Time.now.to_i - Default_cache_expiry_short > last_comment_time.to_i
					Cache.delete('statstime') # the stats page should update now
				end
				Cache.set('lastcomment', Time.now.to_i, Default_cache_expiry_long)
				next
			end
		else
			id = cgi['id'].to_id
		end

		# Verify that id is strictly numeric.
		if id !~ /\A\d+\z/
			raise 'You are a trad.'
		end
		info = Cache.get($0 + id)
		if info.nil?
			query = db.prepare('select n1.name, metadata.displayed_size, metadata.hits, metadata.comment_count, metadata.creation_time, content_types_main.type, content_types_sub.type, n2.name, metadata.is_video from metadata inner join names as n1 on n1.id = metadata.name_id inner join content_types on content_types.id = metadata.content_type_id inner join content_types_main on content_types_main.id = content_types.content_type_main_id inner join content_types_sub on content_types_sub.id = content_types.content_type_sub_id left join owners on owners.id = metadata.owner_id left join names as n2 on n2.id = owners.name_id where metadata.id = ?')
			query.execute(id)

			# Verify that id exists in database.
			if query.num_rows < 1
				raise 'Nothing to pee here.'
			end
			info = query.fetch
			query.close
			Cache.set($0 + id, Base64.encode64(Marshal.dump(info)), Default_cache_expiry_long)
		else
			info = Marshal.load(Base64.decode64(info))
		end
		name = info[0]
		size = info[1]
		hits = info[2].to_s
		comment_count = info[3].to_i
		creation_time = info[4].to_s
		content_type_main = info[5].to_s
		content_type_sub = info[6].to_s
		info_owner_name = info[7].to_s
		is_video = info[8].to_i
		content_type = content_type_main + '/' + content_type_sub

		if info_owner_name.nil? or info_owner_name.empty?
			info_owner_name = 'some luser'
		end

		referrers = Cache.get($0 + 'refs' + id)
		if referrers.nil?
			# get and process referrers
			query = db.prepare('select referrers.address, referrals.count from metadata inner join referrals on referrals.metadata_id = metadata.id inner join referrers on referrers.id = referrals.referrer_id where metadata.id = ?	order by referrals.count desc	limit 3')
			referrers = ''
			query.execute(id).num_rows.times do
				res = query.fetch
				address = res[0].to_s
				count = res[1].to_s
				referrers += "\t\t\t\t" + '<div class="left">' + count + ' from</div><div class="right"><a href="' + address.gsub(/&/, '&amp;') + '">' + address.gsub(/&/, '&amp;') + '</a></div><br class="clear" />' + "\n"
			end
			query.close
			referrers = "\t\t\t\t" + 'No referrers!' + "\n" if referrers.empty?
			Cache.set($0 + 'refs' + id, referrers, Default_cache_expiry_short)
		end

		size = to_readable_bytes(size.to_f)

		owner_name = Cache.get($0 + 'name' + id)
		if owner_name.nil?
			if !owner_id.nil?
				query = db.prepare('select names.name from owners left join names on names.id = owners.name_id where owners.id = ?')
				owner_name = query.execute(owner_id).fetch.to_s
				query.close
			end
			if owner_name.nil? or owner_name.empty?
				owner_name = 'some luser'
			end
			Cache.set($0 + 'name' + id, owner_name, Default_cache_expiry_long)
		end

		if hide_comments == 1
			hide_link = '<a href="i' + id.to_b64 + '-show">+ Show (' + comment_count.to_s + ')</a> <span class="separator">&#x2503;</span> <a href="i' + id.to_b64 + '-show#comment_post">Post</a>'
		else
			hide_link = '<a href="i' + id.to_b64 + '-hide">- Hide</a> <span class="separator">&#x2503;</span> <a href="#comment_post">Post</a>'
		end

		#		cgi.out('text/plain') { comment_count.to_s }
		#		db.commit
		#		next

		comments_body = Cache.get($0 + 'comments' + id)
		if comments_body.nil? or update_prefs
			comments_body =
					"\t\t\t" + '<a name="comment_top">' + "\n" +
					"\t\t\t" + '<div class="title">' + "\n" + 
					"\t\t\t\t" + '<div class="links">' + hide_link + '</div>' + "\n" +
					"\t\t\t\t" + '<div>Comments</div>' + "\n" +
					"\t\t\t" + '</div>' + "\n"
			if hide_comments == 0
				cnum = 0
				if comment_count > 0
					query = db.prepare('select	comments.id, comments.creation_date, comments_body.body,	names.name from comments inner join metadata on metadata.id = comments.metadata_id inner join comments_body on comments_body.id = comments.comment_id	left join owners on owners.id = comments.owner_id left join names on names.id = owners.name_id where metadata.id = ? order by comments.creation_date asc')
					comment_array = Array.new
					query.execute(id).num_rows.times do
						cnum += 1
						res = query.fetch
						array = [cnum.to_s, res[0].to_s, res[1].to_s, res[2], res[3]]
						comment_array << array
					end
					query.close
					comment_array.each { |array|
						num = array[0]
						cid = array[1]
						date = array[2]
						body = array[3].sub(/\A[\r\n]+/, '').sub(/[\r\n]+\z/, '')
						lname = array[4]
						if lname.nil? or lname.empty?
							lname = 'some luser'
						end
						if body =~ /\A\[thumb\]([\w+\/]+)\[\/thumb\]/
							if db.prepare('select id from metadata where id = ?').execute($1.to_id).num_rows > 0
								body.sub!(/\[thumb\]([\w+\/]+)\[\/thumb\][\r\n]*/, '<div class="thumb float" style="margin: 0 5px 0 0"><div class="container"><a href="v\1"><img src="t\1" alt="View file!" /></a></div></div>')
								body += '<br class="clear" />'
							elsif body =~ /\A\[thumb\]v([\w+\/]+)\[\/thumb\]/ and db.prepare('select id from metadata where id = ?').execute($1.to_id).num_rows > 0
								body.sub!(/\[thumb\]v([\w+\/]+)\[\/thumb\][\r\n]*/, '<div class="thumb float" style="margin: 0 5px 0 0"><div class="container"><a href="v\1"><img src="t\1" alt="View file!" /></a></div></div>')
								body += '<br class="clear" />'
							elsif body =~ /\A\[thumb\]i([\w+\/]+)\[\/thumb\]/ and db.prepare('select id from metadata where id = ?').execute($1.to_id).num_rows > 0
								body.sub!(/\[thumb\]i([\w+\/]+)\[\/thumb\][\r\n]*/, '<div class="thumb float" style="margin: 0 5px 0 0"><div class="container"><a href="v\1"><img src="t\1" alt="View file!" /></a></div></div>')
								body += '<br class="clear" />'
							end
						end
						while body =~ /\[i\].+\[\/i\]/
							body.sub!(/\[i\](.+?)\[\/i\]/, '<em>\1</em>')
						end
						while body =~ /\[b\].+\[\/b\]/
							body.sub!(/\[b\](.+?)\[\/b\]/, '<strong>\1</strong>')
						end
						if body =~ /http:\/\/.*http:\/\//m
							body = "i'm gay SPAM SPAM SPAM"
						end
						comments_body +=
						"\t\t\t" + '<a name="comment_' + cid + '"></a>' + "\n" +
						"\t\t\t" + '<div class="content comment left-align">' + "\n" +
						"\t\t\t\t" + '<div style="float: left"><strong>' + lname + '</strong> <span style="color: #666">wrote:</span></div>' + "\n" +
						"\t\t\t\t" + '<div style="float: right"><span style="color: #666">' + date + '</span> <span style="color: #ccc"><span class="separator">&#x2503;</span></span> <a href="#comment_' + cid + '">#' + num + '</a></div>' + "\n" +
						"\t\t\t\t" + '<br class="clear" />' + "\n" +
						"\t\t\t\t" + '<pre>' + body + '</pre>' + "\n" +
						"\t\t\t" + '</div>' + "\n"
					}
						Cache.set($0 + 'comments' + id, comments_body, Default_cache_expiry_short)
				end
			end
		end

		if throttle.to_i < Max_upload_count and !owner_id.nil?
			comments_body +=
				"\t\t\t" + '<a name="comment_post"></a>' + "\n" +
				"\t\t\t" + '<div class="content">' + "\n" +
				"\t\t\t\t" + '<form enctype="multipart/form-data" action="i' + id.to_b64 + '" method="post">' + "\n" +
				"\t\t\t\t\t" + '<div class="form">' + "\n" +
				"\t\t\t\t\t\t" + '<div class="float name left-align">' + "\n" +
				"\t\t\t\t\t\t\t" + '<div class="label">Name</div>' + "\n" +
				"\t\t\t\t\t\t\t" + '<input type="line" name="peewang' + owner_id + '" size="25" class="input field" value="' + owner_name + '" />' + "\n" +
				"\t\t\t\t\t\t" + '</div>' + "\n" +
				"\t\t\t\t\t\t" + '<div style="color: #999; font-family: monospace; text-align: right; float: right"><strong>[thumb]id[/thumb]</strong> - Thumbnail for another file.<br/><strong>[b]text[/b]</strong> - Bold.<strong> &nbsp; [i]text[/i]</strong> - Italics.</div>' + "\n" +
				"\t\t\t\t\t\t" + '<br class="clear" />' + "\n" +
				"\t\t\t\t\t\t" + '<div class="float"><textarea name="loldongs' + owner_id + '" class="input comment"></textarea></div>' + "\n" +
				"\t\t\t\t\t\t" + '<br class="clear" />' + "\n" +
				"\t\t\t\t\t\t" + '<div class="recaptcha">' + "\n" +
				"\t\t\t\t\t\t\t" + Captcha.get_challenge('error', :options => {:theme => 'white'}) + "\n" +
				"\t\t\t\t\t\t" + '</div>' + "\n" +
				"\t\t\t\t\t\t" + '<input type="hidden" name="cocks' + owner_id + '" value="' + id.to_b64 + '" />' + "\n" +
				"\t\t\t\t\t\t" + '<input type="submit" value="COMMENT!" class="button" />' + "\n" +
				"\t\t\t\t\t" + '</div>' + "\n" +
				"\t\t\t\t" + '</form>' + "\n" +
				"\t\t\t" + '</div>' + "\n"
		else
			comments_body +=
				"\t\t\t" + '<a name="comment_post"></a>' + "\n" +
				"\t\t\t" + '<div class="content large">NO COOKIE!</div>' + "\n"
		end
		meta = ''
		if content_type_main == 'image'
			file_link = '<img src="t' + id.to_b64 + '" alt="View file!" />'
		elsif is_video
			file_link = '<img src="' + "#{Down_bucket_url}#{id.to_b64}/#{name.chomp(".html")}.gif" + '" alt="View file!" />'
		elsif content_type == 'audio/mpeg' or content_type == 'application/ogg'
			res = Cache.get($0 + 'meta' + id)
			if res.nil?
				query = db.prepare('select n1.name, n2.name, n3.name, n4.name from metadata left join names as n1 on n1.id = metadata.artist_id left join names as n2 on n2.id = metadata.title_id left join names as n3 on n3.id = metadata.album_id left join names as n4 on n4.id = metadata.year_id where metadata.id = ?')
				res = query.execute(id).fetch
				query.close
				Cache.set($0 + 'meta' + id, res, Default_cache_expiry_long)
			end
			artist = res[0].to_s
			title = res[1].to_s
			album = res[2].to_s
			year = res[3].to_s
			meta += "\t\t\t\t" + '<div class="left"><strong>Artist:</strong></div><div class="right">' + artist + '</div><br class="clear" />' + "\n" if artist and !artist.empty?
			meta += "\t\t\t\t" + '<div class="left"><strong>Title:</strong></div><div class="right">' + title + '</div><br class="clear" />' + "\n" if title and !title.empty?
			meta += "\t\t\t\t" + '<div class="left"><strong>Album:</strong></div><div class="right">' + album + '</div><br class="clear" />' + "\n" if album and !album.empty?
			meta += "\t\t\t\t" + '<div class="left"><strong>Date:</strong></div><div class="right">' + year + '</div><br class="clear" />' + "\n" if year and !year.empty?
			meta = meta.insert(0, "\t\t\t\t<br />\n") if !meta.empty?
			file_link = '<img src="t' + id.to_b64 + '" alt="View file!" />'
		else
			file_link = '<img src="t' + id.to_b64 + '" alt="View file!" />'
		end

		cgi.out('type' => 'text/html') {
			xhtml_pre(' – ' + name + ' (' + content_type + ')') +
			"\t\t\t" + '<div class="title">Information for ' + id.to_b64 + '</div>' + "\n" +
			"\t\t\t" + '<div class="content">' + "\n" +
			"\t\t\t\t" + '<div class="thumb automargin"><div class="container"><a href="v' + id.to_b64 + '">' + file_link + '</a></div></div>' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Owner:</strong></div><div class="right">' + info_owner_name + '</div><br class="clear" />' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Name:</strong></div><div class="right"><a href="v' + id.to_b64 + '/' + name + '">' + name + '</a></div><br class="clear" />' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Size:</strong></div><div class="right">' + size + '</div><br class="clear" />' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Hits:</strong></div><div class="right">' + hits + '</div><br class="clear" />' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Upload Time:</strong></div><div class="right">' + creation_time + '</div><br class="clear" />' + "\n" +
			"\t\t\t\t" + '<div class="left"><strong>Content Type:</strong></div><div class="right">' + content_type + '</div><br class="clear" />' + "\n" +
			meta +
			"\t\t\t" + '</div>' + "\n" +
			"\t\t\t" + '<div class="title">Top referrers</div>' + "\n" +
			"\t\t\t" + '<div class="content">' + "\n" +
			referrers +
			"\t\t\t" + '</div>' + "\n" +
			comments_body +
			xhtml_post
		}
		if update_prefs
			if !owner_id.nil?
				query = db.prepare('update owners set hide_comments = ? where id = ?')
				res = query.execute(hide_comments.to_s, owner_id)
				query.close
				Cache.set($0 + 'hide_comments ' + owner_id, hide_comments.to_s, Default_cache_expiry_long)
			end
		end
		db.commit
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">Ouch, db error: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">' + err + '</div>' + xhtml_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue StandardError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue MemCache::MemCacheError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('application/xhtml+xml') {
			xhtml_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled: ' + err + '</div>' + xhtml_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	ensure
		db.close if db
	end
}
