#!/usr/bin/env ruby
#
# Copyright 2007-2009 David Shakaryan <omp@gentoo.org>
# Copyright 2007-2009 Brenden Matthews <brenden@diddyinc.com>
#
# Distributed under the terms of the GNU General Public License v3
#

require 'omploader'
require 'set'

FCGI.each_cgi {|cgi|
	begin
		db = db_connect

		db_check(db)

		top_files =
			"\t\t\t" + '<div class="title">' + "\n" +
			"\t\t\t\t" + 'Random Images/Videos' + "\n" +
			"\t\t\t" + '</div>' + "\n" +
			"\t\t\t" + '<div class="content">' + "\n"
		query = db.prepare('select max(id), min(id) from metadata')
		stmt = query.execute
		res = stmt.fetch
		max = res[0].to_i + 1
		min = res[1].to_i
		count = Max_rand
		rands = Set.new
		is_videors = Hash.new
		try = 0
		overall_tries = 0
		while count > 0
			rand_id = rand(max - min) + min
			query = db.prepare('select metadata.id, metadata.is_video from metadata where metadata.id = ? and metadata.valid = 1 and (metadata.is_image = 1 or metadata.is_video = 1)')
			stmt = query.execute(rand_id)
			res = stmt.fetch
			num_rows = stmt.num_rows
			stmt.close
			if num_rows < 1
				try += 1
				if try > 15
					count -= 1
					try = 0
				end
			elsif rands.add?(res[0])
				is_videors[res[0]] = res[1].to_i
				count -= 1
			else
				overall_tries += 1
			end
			if overall_tries > 30
				count = 0
			end
		end
		count = 0
		tid = 0
		top_files_info = ''
		rands.each {|id|
			count += 1
			query = db.prepare('select names.name from metadata inner join names on names.id = metadata.name_id where metadata.id = ?')
			stmt = query.execute(id)
			result = stmt.fetch
			stmt.close
			name = result.first.to_s
			is_video = is_videors[id].to_i

			top_files += "\t\t\t\t" + '<div class="thumb float"><div class="container"><a href="/v' + id.to_s.to_b64 + '" title="' + name + '">'
			if is_video > 0
				tid += 1
				turls = "#{Down_bucket_url}#{id.to_s.to_b64}/#{name.chomp(".html").video_sanitise}-still.gif"
				turl = "#{Down_bucket_url}#{id.to_s.to_b64}/#{name.chomp(".html").video_sanitise}.gif"
				top_files +='<img src="' + turls +
							"\" alt=\"View file!\" id=\"thumb_#{tid}\" " +
							"onmouseover=\"document.getElementById('thumb_#{tid}').src='" + turl + '\'" ' +
							"onmouseout=\"document.getElementById('thumb_#{tid}').src='" + turls + '\'" ' +
							'/></a></div></div>' + "\n"
			else
				top_files +=
					'<img src="/t' + id.to_s.to_b64 + '" alt="View file!" /></a></div></div>' + "\n"
			end
			top_files_info += "\t\t\t\t" + '<div class="info float"><a href="/i' + id.to_s.to_b64 + '">Info</a></div>' + "\n"
			if count % 5 == 0
				top_files += "\t\t\t\t" + '<br class="clear" />' + "\n" + top_files_info + "\t\t\t\t" + '<br class="clear" />' + "\n"
				top_files_info = ''
			end
		}
		if count < Max_rand and count % 5 != 0
			top_files += "\t\t\t\t" + '<br class="clear" />' + "\n" + top_files_info + "\t\t\t\t" + '<br class="clear" />' + "\n" +
				"\t\t\t" + '</div>' + "\n"
		else
			top_files += "\t\t\t" + '</div>' + "\n"
		end

		xhtml =
			"\t\t\t" + '<div class="content large">' + "\n" +
			"\t\t\t\t" + '<a href="r">ENCORE UNE FOIS!</a>' + "\n" +
			"\t\t\t" + '</div>' + "\n" +
			top_files

		cgi.out('text/html') { html_pre('', '', false) + xhtml + html_post }
	rescue Mysql::Error => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Ouch, db error: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue RuntimeError => err
		db.rollback unless db.nil?
		cgi.out('text/html') {
			html_pre + '        <div class="content large">' + err + '</div>' + html_post
		}
	rescue SyntaxError, NameError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  String won\'t compile: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue StandardError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue MemCache::MemCacheError => err
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  Error running script: ' + errmsg + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	rescue
		db.rollback unless db.nil?
		if Debug
			errmsg = err.to_s + '<br />' + err.backtrace.join('<br />')
		else
			errmsg = err.to_s
		end
		cgi.out('text/html') {
			html_pre + '        <div class="content large">Oops, we screwed up.  This error isn\'t being handled: ' + err + '</div>' + html_post
		}
		log = Logger.new(Paths['log'])
		log.error(cgi.host)
		log.error(cgi.script_name)
		log.error(cgi.params)
		log.error(err)
	ensure
		db.close if db
	end
}
